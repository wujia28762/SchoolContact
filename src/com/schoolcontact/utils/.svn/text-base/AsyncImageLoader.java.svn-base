package com.schoolcontact.utils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import com.schoolcontact.listener.AsyncImageLoaderListener;
import com.schoolcontact.model.ImageViewWithUrl;
import com.schoolcontact.widget.ZoomImageView;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.os.AsyncTask;
import android.os.Environment;
import android.support.v4.util.LruCache;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

/**
 * 图片异步加载�?
 * 
 * 
 * 
 */
@SuppressLint("NewApi")
public class AsyncImageLoader {
	private Context context;
	// 内存缓存默认 5M
	static final int MEM_CACHE_DEFAULT_SIZE = 5 * 1024 * 1024;
	// 文件缓存默认 10M
	static final int DISK_CACHE_DEFAULT_SIZE = 10 * 1024 * 1024;
	// �?级内存缓存基�? LruCache
	private LruCache<String, Bitmap> memCache;
	// 二级文件缓存基于 DiskLruCache
	private DiskLruCache diskCache;

	private boolean isCompress;

	private AsyncImageLoaderListener asyncimageloaderfinshlistener;

	public void setAsyncimageloaderfinshlistener(
			AsyncImageLoaderListener asyncimageloaderfinshlistener) {
		this.asyncimageloaderfinshlistener = asyncimageloaderfinshlistener;
	}

	private TextView tv;

	public AsyncImageLoader(Context context) {
		this.context = context;
		initMemCache();
		initDiskLruCache();
	}

	/**
	 * 初始化内存缓�?
	 */
	private void initMemCache() {
		memCache = new LruCache<String, Bitmap>(MEM_CACHE_DEFAULT_SIZE) {
			@Override
			protected int sizeOf(String key, Bitmap bitmap) {
				return bitmap.getByteCount();
			}
		};
	}

	/**
	 * 初始化文件缓�?
	 */
	private void initDiskLruCache() {
		try {
			File cacheDir = getDiskCacheDir(context, "bitmap");
			if (!cacheDir.exists()) {
				cacheDir.mkdirs();
			}
			diskCache = DiskLruCache.open(cacheDir, getAppVersion(context), 1,
					DISK_CACHE_DEFAULT_SIZE);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 从内存缓存中�?
	 * 
	 * @param url
	 */
	public Bitmap getBitmapFromMem(String url) {
		return memCache.get(url);
	}

	/**
	 * 加入到内存缓存中
	 * 
	 * @param url
	 * @param bitmap
	 */
	public void putBitmapToMem(String url, Bitmap bitmap) {
		memCache.put(url, bitmap);
	}

	/**
	 * 从文件缓存中�?
	 * 
	 * @param url
	 */
	public Bitmap getBitmapFromDisk(String url) {
		try {
			String key = hashKeyForDisk(url);
			DiskLruCache.Snapshot snapShot = diskCache.get(key);
			Bitmap bitmap = null;
			ReferenceQueue<Bitmap> queue = new ReferenceQueue<Bitmap>();  
		    SoftReference<Bitmap> bitmapref = new SoftReference<Bitmap>(bitmap, queue);
		    if(bitmapref!=null){  
	            bitmap = (Bitmap) bitmapref.get();  
	        }
			if (snapShot != null) {
				InputStream is = snapShot.getInputStream(0);
				if (isCompress) {
					BitmapFactory.Options options = new Options();
					options.inJustDecodeBounds = true;
					// BitmapFactory.decodeStream(is, null,options);
					options.inPreferredConfig = Bitmap.Config.ARGB_4444;
					options.inSampleSize = calculateInSampleSize(options,
							EventList.comPressHeight, EventList.comPressHeight);
					options.inJustDecodeBounds = false;
					options.inPurgeable = true;
					options.inInputShareable = true;
					bitmap = BitmapFactory.decodeStream(is, null, options);
				} else {
					bitmap = BitmapFactory.decodeStream(is);
				}
				return bitmap;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * �? url 加载图片
	 * 
	 * @param imageView
	 * @param imageUrl
	 */
	public Bitmap loadImage(ImageView imageView, String imageUrl) {
		// 先从内存中拿
		Bitmap bitmap = null;
		ReferenceQueue<Bitmap> queue = new ReferenceQueue<Bitmap>();  
	    SoftReference<Bitmap> bitmapref = new SoftReference<Bitmap>(bitmap, queue);
	    if(bitmapref!=null){  
            bitmap = (Bitmap) bitmapref.get();  
        }
		bitmap = getBitmapFromMem(imageUrl);

		if (bitmap != null) {
			Log.i("leslie", "image exists in memory");
			return bitmap;
		}

		// 再从文件中找
		bitmap = getBitmapFromDisk(imageUrl);
		if (bitmap != null) {
			Log.i("leslie", "image exists in file");
			// 重新缓存到内存中
			putBitmapToMem(imageUrl, bitmap);
			return bitmap;
		}

		// 内存和文件中都没有再从网络下�?
		if (!TextUtils.isEmpty(imageUrl)) {
			if (asyncimageloaderfinshlistener != null)
				asyncimageloaderfinshlistener.StartLoader();
			new ImageDownloadTask(imageView).execute(imageUrl);
		}

		return null;
	}

	class ImageDownloadTask extends AsyncTask<String, Integer, Bitmap> {
		private String imageUrl;
		private ImageView imageView;
		private ZoomImageView ziv;
		private ImageViewWithUrl mImageViewWithUrl;

		public ImageDownloadTask(ImageView imageView) {
			this.imageView = imageView;
		}

		public ImageDownloadTask(ZoomImageView zoomiv) {
			this.ziv = zoomiv;
		}

		public ImageDownloadTask(ImageViewWithUrl zoomiv) {
			this.mImageViewWithUrl = zoomiv;
		}

		@Override
		protected Bitmap doInBackground(String... params) {
			try {
				imageUrl = params[0];
				String key = hashKeyForDisk(imageUrl);
				// 下载成功后直接将图片流写入文件缓�?
				DiskLruCache.Editor editor = diskCache.edit(key);
				if (editor != null) {
					OutputStream outputStream = editor.newOutputStream(0);
					if (downloadUrlToStream(imageUrl, outputStream)) {
						editor.commit();
					} else {
						editor.abort();
					}
				}
				diskCache.flush();
				Bitmap bitmap = null;
				ReferenceQueue<Bitmap> queue = new ReferenceQueue<Bitmap>();  
			    SoftReference<Bitmap> bitmapref = new SoftReference<Bitmap>(bitmap, queue);
			    if(bitmapref!=null){  
		            bitmap = (Bitmap) bitmapref.get();  
		        }
				bitmap = getBitmapFromDisk(imageUrl);
				if (bitmap != null) {
					// 将图片加入到内存缓存�?
					putBitmapToMem(imageUrl, bitmap);
					return bitmap;
				}

			} catch (IOException e) {
				e.printStackTrace();
			}

			return null;
		}

		@Override
		protected void onPostExecute(Bitmap result) {
			super.onPostExecute(result);
			if (result != null) {
				// 通过 tag 来防止图片错�?
				if (imageView != null && imageView.getTag() != null
						&& imageView.getTag().equals(imageUrl)) {
					imageView.setImageBitmap(result);
					imageView.setBackgroundResource(0);

				} else if (ziv != null && ziv.getTag().equals(imageUrl)) {
					if (ziv.getVisibility() != View.VISIBLE)
						ziv.setVisibility(View.VISIBLE);
					ziv.setImage(result);
					ziv.setBackgroundResource(0);
					if (tv != null) {
						tv.setVisibility(View.GONE);
					}
				} else if (mImageViewWithUrl != null
						&& mImageViewWithUrl.getmUrl().equals(imageUrl)) {
					mImageViewWithUrl.getmImageView().setImageBitmap(result);
				//	mImageViewWithUrl.getmImageView().setBackgroundResource(0);
				}

//				 if(result != null && !result.isRecycled()){
//					 result.recycle();  
//					 result = null;  
//				    }  
//				    System.gc(); 
				    
				if (asyncimageloaderfinshlistener != null) {
					asyncimageloaderfinshlistener.FinshLoader();
				}
			}
		}

		private boolean downloadUrlToStream(String urlString,
				OutputStream outputStream) {
			HttpURLConnection urlConnection = null;
			BufferedOutputStream out = null;
			BufferedInputStream in = null;
			try {
				final URL url = new URL(urlString);
				urlConnection = (HttpURLConnection) url.openConnection();
				in = new BufferedInputStream(urlConnection.getInputStream(),
						8 * 1024);
				out = new BufferedOutputStream(outputStream, 8 * 1024);
				int b;
				while ((b = in.read()) != -1) {
					out.write(b);
				}
				return true;
			} catch (final IOException e) {
				e.printStackTrace();
			} finally {
				if (urlConnection != null) {
					urlConnection.disconnect();
				}
				try {
					if (out != null) {
						out.close();
					}
					if (in != null) {
						in.close();
					}
				} catch (final IOException e) {
					e.printStackTrace();
				}
			}
			return false;
		}
	}

	private File getDiskCacheDir(Context context, String uniqueName) {
		String cachePath;
		if (Environment.MEDIA_MOUNTED.equals(Environment
				.getExternalStorageState())
				|| !Environment.isExternalStorageRemovable()) {
			cachePath = context.getExternalCacheDir().getPath();
		} else {
			cachePath = context.getCacheDir().getPath();
		}
		return new File(cachePath + File.separator + uniqueName);
	}

	private int getAppVersion(Context context) {
		try {
			PackageInfo info = context.getPackageManager().getPackageInfo(
					context.getPackageName(), 0);
			return info.versionCode;
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}
		return 1;
	}

	private String hashKeyForDisk(String key) {
		String cacheKey;
		try {
			final MessageDigest mDigest = MessageDigest.getInstance("MD5");
			mDigest.update(key.getBytes());
			cacheKey = bytesToHexString(mDigest.digest());
		} catch (NoSuchAlgorithmException e) {
			cacheKey = String.valueOf(key.hashCode());
		}
		return cacheKey;
	}

	private String bytesToHexString(byte[] bytes) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < bytes.length; i++) {
			String hex = Integer.toHexString(0xFF & bytes[i]);
			if (hex.length() == 1) {
				sb.append('0');
			}
			sb.append(hex);
		}
		return sb.toString();
	}

	public Bitmap loadImage(ImageViewWithUrl iv_bigimage, String imageUrl) {
		// 先从内存中拿
		Bitmap bitmap = null;
		ReferenceQueue<Bitmap> queue = new ReferenceQueue<Bitmap>();  
	    SoftReference<Bitmap> bitmapref = new SoftReference<Bitmap>(bitmap, queue);
	    if(bitmapref!=null){  
            bitmap = (Bitmap) bitmapref.get();  
        }
		bitmap = getBitmapFromMem(imageUrl);

		if (bitmap != null) {
			Log.i("leslie", "image exists in memory");
			return bitmap;
		}

		// 再从文件中找
		bitmap = getBitmapFromDisk(imageUrl);
		if (bitmap != null) {
			Log.i("leslie", "image exists in file");
			// 重新缓存到内存中
			putBitmapToMem(imageUrl, bitmap);
			return bitmap;
		}

		// 内存和文件中都没有再从网络下�?
		if (!TextUtils.isEmpty(imageUrl)) {
			new ImageDownloadTask(iv_bigimage).execute(imageUrl);
		}

		return null;
	}

	public Bitmap loadImage(ZoomImageView iv_bigimage, String imageUrl,
			TextView tv_Textview) {
		// 先从内存中拿
		Bitmap bitmap = null;
		ReferenceQueue<Bitmap> queue = new ReferenceQueue<Bitmap>();  
	    SoftReference<Bitmap> bitmapref = new SoftReference<Bitmap>(bitmap, queue);
	    if(bitmapref!=null){  
            bitmap = (Bitmap) bitmapref.get();  
        }
		bitmap = getBitmapFromMem(imageUrl);

		this.tv = tv_Textview;
		if (bitmap != null) {
			Log.i("leslie", "image exists in memory");
			return bitmap;
		}

		// 再从文件中找
		bitmap = getBitmapFromDisk(imageUrl);
		if (bitmap != null) {
			Log.i("leslie", "image exists in file");
			// 重新缓存到内存中
			putBitmapToMem(imageUrl, bitmap);
			return bitmap;
		}

		// 内存和文件中都没有再从网络下�?
		if (!TextUtils.isEmpty(imageUrl)) {
			new ImageDownloadTask(iv_bigimage).execute(imageUrl);
		}

		return null;
	}

	public boolean isCompress() {
		return isCompress;
	}

	public void setCompress(boolean isCompress) {
		this.isCompress = isCompress;
	}

	public int calculateInSampleSize(BitmapFactory.Options op, int reqWidth,
			int reqheight) {
		int originalWidth = op.outWidth;
		int originalHeight = op.outHeight;
		int inSampleSize = 1;
		if (originalWidth > reqWidth || originalHeight > reqheight) {
			int halfWidth = originalWidth / 2;
			int halfHeight = originalHeight / 2;
			while ((halfWidth / inSampleSize > reqWidth)
					&& (halfHeight / inSampleSize > reqheight)) {
				inSampleSize *= 2;

			}
		}
		return inSampleSize;
	}
}
